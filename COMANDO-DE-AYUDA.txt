
*Canal de Django para hacer curso de aplicacion 
Django + MongoDB + Vue JS | full-stack app tutorial

*Python Django Tutorial for Beginners
https://www.youtube.com/watch?v=rHux0gMZ3Eg&t=1761s

Primero creamos un ambiente virtual
comando 
-------------------------------------
1.pip install virtualenv

2. virtualenv env
-------------------------------------

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

3. Ahora debemos crear un archivo en nuestro proyecto
   .gitignore
  // Nos permite ignorar archivo que no queremos subir 
  // a gitgub, en este caso el archivo que vamos a ignorar 
  //es env que es el entorno virtual que hemos creado

4. .gitignore 
// Aqui vamos a escribir todo lo que queremos ignorar
gitignore python en nuestro navegador 
https://github.com/github/gitignore/blob/main/Python.gitignore
Copiamos todo eso y lo pegamos en nuestro archivp
 .gitignore 
 Environments = ENTORNOS 
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

4. Ahora vamos a crear nuestro archivo 
  requirements.txt

Esto es control de version y tener siempre 
lo mismo resultado

5. Para instalar django lo podemos instalar 
de 2 forma.

Vamos al nevegador y escribimos 
django pip

1* pip install Django

2* django==4.1.3
-------------------------------------------------------------------

Instalacion de la primera apliacion en Django
  #Esta es la configuracion del proyecto 
8. django-admin startproject core . 
   [ otro nombre que tu quieras 
   core . el punto es para indicarle que lo cree en el directorio 
    core es una nomenclatura que le estamos
    dando a la primera aplicacion que se va ha crear
    Es para iniciar Django ]

python manage.py startapp blog 
// blog ES EL NOMBRE QUE LLEVA EL NOMBRE DEL PROYECTO...
  También se crea el modelo ya incluido de una vez...
-----------------------------------------------------------------------
asgi.py // Uno significa asicrono
wsgi.py // Significa no asicrono 

Para correr django lo hacemos con el siguiente comando 
1. python manage.py runserver // Nos va permitir correr el
servidor de Django




-------------------------------------------------------------------------

Veremos que es setting.py 
Contiene informacion de todo el proyecto

*En INSTALLED_APPS
[ ES DONDE SE VA AGREGAR EL PROYECTO QUE VAMOS A ESTAR TRABAJANDO]
Debemos instalar core ya que con eso le estamos dando acceso 
a todo los archivo que se encuentra adentro de este FOLDER

* BASE_DIR = Path(__fil{e__).resolve().parent.parent 

// RECORDEMOS QUE  || BASE_DIR || 
HACE REFERENCIA A DONDE SE ENCUENTRA EL DIRECTORIO DE NUESTRO ARCHIVO

* SECRET_KEY = "django-insecure-*%^hmyf=_$sc-cf!1$15&yz=c3f32r*yp318ce4z!_qw7^!#=r"
ES MUY IMPORTANTE PROTEGERLO para que no tengan acceso a nuestro sitio 
-------------------------------------------------------------------------------
* DEBUG = True // Es para tener informacion del desarrollo 
que de la  aplicaciones 
que despleguemos lo debemos poner False
eso es muy importante 

* ALLOWED_HOSTS = [] Es la url http://127.0.0.1:8000/

Significa que podemos trabajar con con cualquier 
host la estrellita significa que podemos aceptar 
todo ['*']
ALLOWED_HOSTS = ['*']
-----------------------------------------------------

* WSGI_APPLICATION = 'core.wsgi.application' 

WSGI ES EL RAPPER QUE LAS IMAGENES SE PUEDAN ENTERDER 
EN EL SERVIDOR
SE USA ALFINAL PARA QUE NUESTRA APLICACION FUNCIONE...

-------------------------------------------------------


* AUTH_PASSWORD_VALIDATORS = []
Es para validar las contraseñas
--------------------------------------------------------

* LANGUAGE_CODE = "en-us"
Esto es para que Django funcione para diferentes lenguajes 
-----------------------------------------------------------

* STATIC_URL = 'static/' // ES PARA TRABAJAR CON LAS IMAGENES
  DEBEMOS CREAR UNA CARPETA SI QUEREMOS TRABAJAR CON LAS IMAGENES
  STATIC_URK = '/static/'

----------------------------------------------------------
Despúes migramos las migraciones 
con el comando 
python manage.py migrate
---------------------------------------------------------

Despues creamos un usuarios para la parte de administracion
con el comando 
 python manage.py createsuperuser 
// DE ESTA MANERA CREAMOS UN SUPER ADMINISTRADOR 

Usuario = admin
Email = mail@admin.com
Clasve = admin123

-------------------------------------------------------------
Ahora vamos a crear una vista
nos vamos ubicar en la carpeta core
y creamos una vista views.py
------------------------------------------------------------
views.py

from django.views.generic import View

get //Es para poder llamar get()
*Los fundamentos get()
El getRequest es lo que pide la informacion para poder ver 
El postRequest Es lo que tu envias, es decir lo que tu envia 
al servidor 


class HomeView(View):
	def get(self, request, *args, **kwargs )

//200 Signfica ok
---------------------------------

*args, **kwargs 
// HACE REFERENCIA A CUALQUIER VARIABLE O QUE EL paramentros QUE ESTAMOS UTILIZANDO LO LLAME
// O cualquier parametro estemos llamando


------------------------------------------------------

* En el archivo urls.py que se encuentra en core

from django.contrib import admin
from django.urls import path, include

from .views import HomeView

urlpatterns = [
    path("admin/", admin.site.urls),
    path('', HomeView.as_view(), name='home')
]

-------------------------------------------------

Ahora como podemos proteger nuesta informacion sencible 
que se encuentra en nuestro archivo setting.py

* Vamos a crear un archivo en core llamado 
 .env donde vamos a guardar todas las variables 
sencibles que se encuentra en el archivo settings.py
antes de hacer eso debemos instalar un modulo 
llamado 
djangoenviron pip 
django-environ 0.9.0

Despues debemos ir settings.py 
Importamos import environ
Despues 

env = environ.Env() # Es para crear variables
environ.Env.read_env() # Es para leer las variables

1. SECRET_KEY = os.environ.get('SECRET_KEY')

2. DEBUG= os.environ.get('DEBUG')

De esta mara protegemos las varibles de anvientes
es muy importante para la seguridad LA INFORMACION
DE LA PAGINA
---------------------------------------------------------------------


Ahora vamos a crear un modelos
vamos a crear una class

class Project(models.Model):
       name = models.CharField




class Task(models.Model):
      title = models.CharFields(max_length=200)
      description = models.TextField()
      project = models.ForeignKey(Project, on_delete=models.CASCADE)

         # Es para relacionar la tabla
	 # on_delete=models.CASCADE
	 # Es para cuando se elimine un datos 
	 # Se eliminen todos lo que esten con el


// También puedo guardar algunos datos y es utilizando
// El comando python manage.py  shell

from myapp.models import Project, Task

p = Project(name="aplicacion movil")
p
p.save()
Y si yo quiero traerme todo los objetos 
lo puedo hacer con el siguiente comando
Project.objects.all() # Me trae una consulta de la base de datos
Si nosotros queremos traer un solo id 
Project.objects.get(id=1)



--------------------------------------------------------------

Este codigo es donde esta mi urls.py en mi carpeta 
core...................

from django.contrib import admin
from django.urls import path, include

# from myapp.views import saludar
# from myapp import views

# Debemos añadir include 

urlpatterns = [
    path("admin/", admin.site.urls),
    # path('',views.saludar),
    # path('about/',views.about)
 
    # De esta forma se esta incluyendo las rutas
    path('', include('myapp.urls'))
]

------------------------------------------------------------------
Este archivo se tiene que crear y lo vamos llamar 
urls.py

from django.urls import path


# Ya no tendria que darle el nombre de la carpeta
# myapp

from .  import  views
# from myapp.views import 
# El punto . es muy importante 
# para indicar que estamos en la rais de la 
# carpeta

# Recodemos que esto es una lista urlpatterns[]
urlpatterns = [

  path('',views.saludar),
  path('about/',views.about),
  path('hola/', views.hola),

]






























